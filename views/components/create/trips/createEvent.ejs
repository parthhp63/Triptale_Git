<section class="mx-auto bg-cover  w-full py-4" style="
    background-image: linear-gradient(
        rgba(250, 249, 249, 0.8),
        rgba(250, 248, 248, 0.8)
      ),
      url(/assets/loginlayout/1976998.jpg);
  ">
  <div class="container mx-auto h-full">
    <div class="heading mb-4">
      <h2 class="text-center text-4xl text-[#2e8cff] font-bold head-font">
         Trip Events
      </h2>
    </div>
    <form
      class="w-[70%] bg-white max-h-[50rem] overflow-y-scroll rounded-md p-8 shadow-[0px_4px_16px_rgba(17,17,26,0.1),_0px_8px_24px_rgba(17,17,26,0.1),_0px_16px_56px_rgba(17,17,26,0.1)] mx-auto"
       method="post" action="<%= route %>" id="EventForm" >
      <div class="flex items-center flex-col justify-center w-full">
        
        <label for="dropzone-file"
          class="flex flex-col items-center justify-center w-full h-20 border-2 border-gray-300 border-dashed rounded-lg cursor-pointer bg-gray-50 dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600">
          <div class="flex flex-col items-center justify-center ">
            <svg class="w-8  text-gray-500 dark:text-gray-400" aria-hidden="true"
              xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 16">
              <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                d="M13 13h3a3 3 0 0 0 0-6h-.025A5.56 5.56 0 0 0 16 6.5 5.5 5.5 0 0 0 5.207 5.021C5.137 5.017 5.071 5 5 5a4 4 0 0 0 0 8h2.167M10 15V6m0 0L8 8m2-2 2 2" />
            </svg>
            <p class=" text-sm text-gray-500 dark:text-gray-400 sub-font">
              <span class="font-semibold"> Upload Cover Photo</span> 
              
            </p>
            <p class="text-xs text-gray-500 dark:text-gray-400 sub-font">
              SVG, PNG, JPG or JPEG
            </p>
          </div>
          <input id="dropzone-file" type="file" class="hidden image" name="image" />
        </label>

        <output class="mt-3">
          <div class='flex flex-wrap '>
            <% if (eventData.image) { %>
              <div class="image m-2 bg-[#d3d3d3] p-[10px] rounded-md">
                <img src="/trips/tripsevents/<%= eventData.image %>" class="bg-cover w-[5rem] h-[5rem]" alt="image">
              </div>
              <% } %>
          </div>
        </output>
      </div>

      <div class="my-3">
        <label for="title" class="block text-sm font-medium leading-6 text-gray-900 sub-font">Title :</label>
        <div class="mt-2">
          <input id="title" name="title" type="text" value="<%- eventData.title?eventData.title:"" %>"
            class="block w-full rounded-md px-3 border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 sub-font val-required"
            placeholder="Enter Your Event Title" />
        </div>
      </div>

      <div class="my-3">
        <label for="description" class="block text-sm font-medium leading-6 text-gray-900 sub-font">Description
          :</label>
        <div class="mt-2">
          <textarea
            class="block val-required w-full rounded-md px-3 border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 sub-font resize-none"
            rows="3" placeholder="Enter Event description" id="description" name="description"><%- eventData.discription?eventData.discription:"" %></textarea>
        </div>
      </div>
      <div class="my-3 relative">
        <label for="strtime" class="block text-sm font-medium leading-6 text-gray-900 sub-font">Event Start Time :</label>
        <div class="mt-2">
          <input id="strtime"  autocomplete="off" list="hashtaglist" type="datetime-local" name="start_time"
            class="block w-full val-required rounded-md px-3 border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 sub-font" />
            <span id="startTimeAlert" class="opacity-60 text-rose-500 text-xs"></span>
        </div>
      </div>

      <div class="my-3 relative">
        <label for="endtime" class="block text-sm font-medium leading-6 text-gray-900 sub-font">Event End Time :</label>
        <div class="mt-2">
          <input id="endtime" name="end_time"  type="datetime-local" autocomplete="off" 
            class="block w-full val-required rounded-md px-3 border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6 sub-font" />
            <span id="endTimeAlert" class="opacity-60 text-rose-500 text-xs"></span>
        </div>
      </div>

      <button id="submitPost"
        class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 sub-font">
        Submit
      </button>
      <a href="javascript:history.back()"
        class="text-white ml-1 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-3 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 sub-font">
        Cancel</a>
    </form>
  </div>
</section>


<script>
    const output = document.querySelector("output");
  const eventImage = document.querySelector(".image");
  const submitPost = document.querySelector("#submitPost");
  const eventForm = document.querySelector("#EventForm");
  let imagesArray = []
  eventImage.addEventListener("change", () => {
    eventForm.setAttribute("enctype","multipart/form-data")
    imagesArray = [];
    const files = eventImage.files;
    for (let i = 0; i < files.length; i++ ) {
      imagesArray.push(files[i]);
    }
    displayImages();
  });

  function displayImages() {

    let images = `<div  class='flex flex-wrap '>`;
    imagesArray.forEach((image, index) => {
      images += `<div class="image m-2 bg-[#d3d3d3] p-[10px] rounded-md"><span onclick="deleteImage(${index})" class="cursor-pointer text-3xl">&times;</span>
                  <img src="${URL.createObjectURL(
                    image
                  )}" class="bg-cover w-[5rem] h-[5rem]" alt="image">
                </div>`;
    });
    images += "</div>";
    output.innerHTML = images;
  }

  function deleteImage(index) {
    imagesArray.splice(index, 1);
    eventImage.value = "";
    displayImages();
  }

  submitPost.addEventListener("click",(e)=>{
    e.preventDefault();
    if (validation()) {
      eventForm.submit()
    }
  })

  function validation(){
    let valRequired = document.querySelectorAll(".val-required");
  
    for (let i = 0; i < valRequired.length; i++) {
    if (valRequired[i].value.trim() == "") {
      sweetAlertError("Enter All Detail")
      return false
    }
  }
    
  if (window.location.pathname.split("/").slice(1,3).join("/") == "trips/eventcreate") {
      if (eventImage.files.length <= 0) {
        sweetAlertError("select at least one cover photo for event")
        return false;
      } 
    }

  const extention = ["jpg", "jpeg", "png", "svg"];
    
    if (imagesArray[0] != undefined) {
        if (!extention.includes(imagesArray[0].name.split(".").pop())) {
          sweetAlertError("Only SVG, PNG,JPG , JPEG, image allowed!!!!")
          return false;
        } else if (Math.round(imagesArray[0].size / 1024) >= 3000) {
          sweetAlertError( "Max 3Mb size image allowed!!!!")
          return false;
        }
    }

    
 

    let title = document.querySelector("#title");
    if (title.value.trim().length > 50) {
      sweetAlertError("Too much content in title")
      return false;
    }
  
  //description validate

    let description = document.querySelector("#description");
    if (description.value.trim().length > 200) {
      sweetAlertError("Too much content in description")
      return false;
    }
  

 
    let startTrip = new Date("<%=tripData.start_date%>")
    let endTrip = new Date("<%=tripData.end_date%>")
     endTrip.setDate(endTrip.getDate()+1);
    let startEvent = new Date(document.querySelector("#strtime").value); 
    let endEvent =new Date(document.querySelector("#endtime").value);
    let startTimeAlert = document.querySelector("#startTimeAlert");
    let endTimeAlert = document.querySelector("#endTimeAlert");
   
    if (startEvent<startTrip) {
      startTimeAlert.innerText = `* Select DateTime between ${startTrip.toLocaleDateString()} And ${endTrip.toLocaleDateString()}`
      return false
    }else{
      startTimeAlert.innerText = ""
      if (startEvent>endEvent) {
        endTimeAlert.innerText = "* event end time should be after start time"
        return false
    }else{
      endTimeAlert.innerText = ""
    }
    } 
    if (endEvent>endTrip) {
      endTimeAlert.innerText = `* Select DateTime between ${startTrip.toLocaleDateString()} And ${endTrip.toLocaleDateString()}`
      return false
    }else{
      endTimeAlert.innerText = ""
      if (startEvent>endEvent) {
        endTimeAlert.innerText = "* event end time should be after start time"
      return false
    }else{
      endTimeAlert.innerText = ""
    }
    }
    return true;
  }

  if (location.pathname == "/trips/eventupdate") {
    let startEvent = document.querySelector("#strtime")
    let endEvent =document.querySelector("#endtime")
    startEvent.value = datetimeLocal("<%= eventData.start_time %>")
    endEvent.value = datetimeLocal("<%= eventData.end_time %>")
  }

  function datetimeLocal(datetime) {
    const dt = new Date(datetime);
    dt.setMinutes(dt.getMinutes() -(dt.getTimezoneOffset()));
    return dt.toISOString().slice(0, 16);
}

let startTrip = new Date("<%=tripData.start_date %>")
startTrip.setDate(startTrip.getDate()+1);
let endTrip = new Date("<%=tripData.end_date %>")
 endTrip.setDate(endTrip.getDate()+1);
let startEvent = document.querySelector("#strtime")
let endEvent =document.querySelector("#endtime")
startEvent.setAttribute("min",startTrip.toISOString().slice(0,startTrip.toISOString().lastIndexOf(":")))
startEvent.setAttribute("max",endTrip.toISOString().slice(0,endTrip.toISOString().lastIndexOf(":")))
endEvent.setAttribute("min",startTrip.toISOString().slice(0,startTrip.toISOString().lastIndexOf(":")))
endEvent.setAttribute("max",endTrip.toISOString().slice(0,endTrip.toISOString().lastIndexOf(":")))



function sweetAlertError(msg){
  Swal.fire({
    icon: "error",
    title: "Oops...",
    text: msg,
  });
}
</script>